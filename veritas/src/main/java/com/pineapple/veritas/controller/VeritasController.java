package com.pineapple.veritas.controller;

import com.pineapple.veritas.request.LoginRequest;
import com.pineapple.veritas.service.VeritasService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

/**
 * Route controller for the Veritas service.
 */
@RestController
public class VeritasController {
  private final VeritasService veritasService;

  @Autowired
  public VeritasController(VeritasService veritasService) {
    this.veritasService = veritasService;
  }

  @GetMapping({"/", "/index", "/home"})
  public String index() {
    return "Welcome to Veritas!";
  }

  /**
   * Sends a request to the underlying VeritasService checkText() method to analyze
   * a string.
   *
   * @param text  String containing the text to be analyzed
   * @return Http response with a boolean indicating whether the provided text was potentially
   *     generated by generative AI or not (or an error).
   */
  @PostMapping({"/checkText"})
  public ResponseEntity<?> checkText(@RequestBody String text) {
    try {
      return veritasService.checkText(text);
    } catch (Exception e) {
      return handleException(e);
    }
  }

  /**
   * Sends a request to the underlying VeritasService checkText() method to analyze
   * a string and a user.
   *
   * @param text String containing the text to be analyzed
   * @param userId String containing the userId (the user who is reponsible for this text)
   * @param orgId String containing the orgId (the organization to which the user belongs)
   * @return Http response with a boolean indicating whether the provided text was potentially
   *     generated by generative AI or not (or an error).
   */
  @PostMapping({"/checkTextUser"})
  public ResponseEntity<?> checkTextUser(@RequestBody String text,
                                         @RequestParam String userId,
                                         @RequestParam String orgId) {
    try {
      if (!veritasService.checkRegistered(orgId)) {
        return new ResponseEntity<>("Please register first", HttpStatus.OK);
      }

      if (!veritasService.isTimeStampValid(orgId)) {
        return new ResponseEntity<>("Session expired, please login again", HttpStatus.OK);
      }
      veritasService.updateTimestamp(orgId);
      return veritasService.checkTextUser(text, userId, orgId);
    } catch (Exception e) {
      return handleException(e);
    }
  }

  /**
   * Checks the number of times a particular user has been flagged for AI-generated text (from DB).
   *
   * @param userId String containing the userId (the user we want to check)
   * @param orgId String containing the orgId (the organization to which the user belongs)
   * @return Http response with an integer indicating the number of times a user was flagged.
   */
  @GetMapping({"/numFlags"})
  public ResponseEntity<?> numFlags(@RequestParam String userId,
                                    @RequestParam String orgId) {
    try {
      if (!veritasService.checkRegistered(orgId)) {
        return new ResponseEntity<>("Please register first", HttpStatus.OK);
      }

      if (!veritasService.isTimeStampValid(orgId)) {
        return new ResponseEntity<>("Session expired, please login again", HttpStatus.OK);
      }
      veritasService.updateTimestamp(orgId);
      return veritasService.numFlags(userId, orgId);
    } catch (Exception e) {
      return handleException(e);
    }
  }

  /**
   * Register a new organisation.
   */
  @PostMapping("/register")
  public ResponseEntity<?> register(@RequestBody LoginRequest loginRequest) {
    if (veritasService.checkRegistered(loginRequest.getOrgId())) {
      return new ResponseEntity<>("Organization already registered", HttpStatus.OK);
    }
    try {
      return veritasService.register(loginRequest);
    } catch (Exception e) {
      return handleException(e);
    }
  }

  @PostMapping("/login")
  public ResponseEntity<?> login(@RequestBody LoginRequest loginRequest) {
    return veritasService.login(loginRequest);
  }

  private ResponseEntity<?> handleException(Exception e) {
    System.out.println(e.toString());
    return new ResponseEntity<>("An error has occurred", HttpStatus.INTERNAL_SERVER_ERROR);
  }
}
