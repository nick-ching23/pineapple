from flask import Flask, request, jsonify
import Levenshtein
from openai import OpenAI

app = Flask(__name__)

client = OpenAI()

# calls ChatGPT API with given prompt.
def get_chatgpt_response(prompt: str) -> str:
    
    completion = client.chat.completions.create(
    model="gpt-4o",
    messages=[
        {"role": "system", "content": "Rewrite the text in the reverse only the meaning."},
        {
            "role": "user",
            "content": prompt
        }]
    )
    return completion.choices[0].message.content


def rewrite_text(original_text:str): 
    """
    Executes the rewrite using the equivalence method. 
    """
    print("Original Text: " + original_text)
    first_rewrite = get_chatgpt_response(original_text)
    print("First Rewrite: " + first_rewrite)
    paraphrased_text = get_chatgpt_response(first_rewrite)
    print("Paraphrased Text: " + original_text)

    return paraphrased_text


# Function to analyze texts based on Levenshtein ratio
def analyze_texts(original_text: str, paraphrased_text: str, ratio_threshold=0.55)-> bool:
    """
    Will return True if generated by ChatGPT, False otherwise
    """
    
    ratio = Levenshtein.ratio(original_text, rewrite_text(original_text))
    print("Levenshtein ratio: " + str(ratio))

    return True if ratio > ratio_threshold else False




# Main function to compare the original text and check if AI-generated
def execute_gpt_comparsion(original_text:str) -> bool: 
    """
    Return True if written by AI 
    Return False if written by human
    """
    
    gpt_generated = analyze_texts(original_text, "")
    return gpt_generated


@app.route('/')
def index():
    return "Hello, welcome to Veritas!"

# Flask route for executing the GPT comparison
@app.route('/api/check-text', methods=['POST'])
def check_text():
    data = request.get_json()
    original_text = data.get('text', '')

    if not original_text:
        return jsonify({"error": "No text provided"}), 400
    
    result = execute_gpt_comparsion(original_text)
    
    return jsonify({"result": result})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True) 